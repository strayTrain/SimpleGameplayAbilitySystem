[/Script/GameplayTags.GameplayTagsList]
; Ability Component Events
GameplayTagList=(Tag="SimpleGAS.Events.AbilityComponent.GameplayTagAdded", DevComment="Broadcast when a tag gets added to an ability component")
GameplayTagList=(Tag="SimpleGAS.Events.AbilityComponent.GameplayTagRemoved", DevComment="Broadcast when a tag gets removed from an ability component")

; Ability Events
GameplayTagList=(Tag="SimpleGAS.Events.Ability.Added", DevComment="Broadcast when an ability is added on the server")
GameplayTagList=(Tag="SimpleGAS.Events.Ability.Removed", DevComment="Broadcast when an ability is removed on the server")
GameplayTagList=(Tag="SimpleGAS.Events.Ability.Activated", DevComment="Broadcast when an ability is activated on the client or server")
GameplayTagList=(Tag="SimpleGAS.Events.Ability.Ended", DevComment="Broadcast when an ability is ended on the client or server")
GameplayTagList=(Tag="SimpleGAS.Events.Ability.Ended.Success", DevComment="Broadcast when an ability is ended without issues on the client or server")
GameplayTagList=(Tag="SimpleGAS.Events.Ability.Ended.Cancel", DevComment="Broadcast when an ability is cancelled on the client or server")
GameplayTagList=(Tag="SimpleGAS.Events.Ability.SnapshotTaken", DevComment="Broadcast when a state snapshot is taken on the server")
GameplayTagList=(Tag="SimpleGAS.Events.Ability.WaitForAbilityEnded", DevComment="Broadcast when the WaitForClient/ServerAbilityEnded latent node is called")

; Attribute Modifier Events
GameplayTagList=(Tag="SimpleGAS.Events.AttributeModifer.Applied", DevComment="Broadcast when a modifier is initially applied to an ability component")
GameplayTagList=(Tag="SimpleGAS.Events.AttributeModifer.Ticked", DevComment="Broadcast when a duration modifier ticks")
GameplayTagList=(Tag="SimpleGAS.Events.AttributeModifer.Ended", DevComment="Broadcast when a duration modifier ends")

; Attribute Modifier Action scratchpad tags
GameplayTagList=(Tag="SimpleGAS.ModifierActionScratchpadTags.FloatAttributeOverflow", DevComment="A scratchpad entry used to keep track of float attribute overflow")

; Float Attribute Events
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Added.Float", DevComment="Broadcast when a float attribute is added")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Removed.Float", DevComment="Broadcast when a float attribute is removed")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Changed.Float.BaseValue", DevComment="Broadcast when the base value of an attribute is changed")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Changed.Float.MinBaseValue", DevComment="Broadcast when the min base value of an attribute is changed")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Changed.Float.MaxBaseValue", DevComment="Broadcast when the max base value of an attribute is changed")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Changed.Float.CurrentValue", DevComment="Broadcast when the current value of an attribute is changed")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Changed.Float.MinCurrentValue", DevComment="Broadcast when the min current value of an attribute is changed")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Changed.Float.MaxCurrentValue", DevComment="Broadcast when the max current value of an attribute is changed")

; Struct Attribute Events
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Added.Struct", DevComment="Broadcast when a struct attribute is added")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Changed.Struct", DevComment="Broadcast when a struct attribute is changed")
GameplayTagList=(Tag="SimpleGAS.Events.Attributes.Removed.Struct", DevComment="Broadcast when a struct attribute is removed")

; Domains
GameplayTagList=(Tag="SimpleGAS.Domains.Ability.Local",DevComment="Domain for local ability events")
GameplayTagList=(Tag="SimpleGAS.Domains.Ability.Authority",DevComment="Domain for server ability events")
GameplayTagList=(Tag="SimpleGAS.Domains.Attribute.Local",DevComment="Domain for local ability events")
GameplayTagList=(Tag="SimpleGAS.Domains.Attribute.Authority",DevComment="Domain for server ability events")